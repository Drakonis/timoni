/*
Copyright 2023 Stefan Prodan

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"fmt"
	"io"
	"os"
	"path"

	"cuelang.org/go/cue"
	"cuelang.org/go/cue/cuecontext"
	"cuelang.org/go/cue/format"
	"github.com/spf13/cobra"

	"github.com/stefanprodan/timoni/internal/engine"
)

var importCrdCmd = &cobra.Command{
	Use:   "crd [MODULE PATH]",
	Short: "Generate CUE definitions from Kubernetes CRDs",
	Example: `  # generate CUE definitions from a local YAML file
  timoni mod import crd -f crds.yaml
`,
	RunE: runImportCrdCmd,
}

type importCrdFlags struct {
	modRoot string
	crdFile string
}

var importCrdArgs importCrdFlags

func init() {
	importCrdCmd.Flags().StringVarP(&importCrdArgs.crdFile, "file", "f", "",
		"The path to Kubernetes CRD YAML.")

	modImportCmd.AddCommand(importCrdCmd)
}

const header = `// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni import crd -f `

func runImportCrdCmd(cmd *cobra.Command, args []string) error {
	if len(args) > 0 {
		importCrdArgs.modRoot = args[0]
	}

	log := LoggerFrom(cmd.Context())
	cuectx := cuecontext.New()

	if fs, err := os.Stat(importCrdArgs.crdFile); err != nil || !fs.Mode().IsRegular() {
		return fmt.Errorf("path not found: %s", importCrdArgs.crdFile)
	}

	cueModDir := path.Join(importCrdArgs.modRoot, "cue.mod")

	if fs, err := os.Stat(cueModDir); err != nil || !fs.IsDir() {
		return fmt.Errorf("cue.mod not found in the module path %s", importCrdArgs.modRoot)
	}

	f, err := os.Open(importCrdArgs.crdFile)
	if err != nil {
		return err
	}

	b, err := io.ReadAll(f)
	if err != nil {
		return err
	}

	crds, err := engine.YamlCRDToCueIR(cuectx, b)
	if err != nil {
		return err
	}

	for _, crd := range crds {
		gvDir := path.Join(crd.Props.Spec.Group, crd.Props.Spec.Names.Singular)
		for _, crdVersion := range crd.Schemas {
			gvkDir := path.Join(cueModDir, gvDir, crdVersion.Version)
			log.Info(fmt.Sprintf("generating definition to %s", gvkDir))

			def, err := format.Node(crdVersion.Schema.Syntax(cue.All(), cue.Docs(true)))
			if err != nil {
				return err
			}

			cueGen := fmt.Sprintf("%s%s\n\npackage %s\n\n%s", header, importCrdArgs.crdFile, crdVersion.Version, string(def))

			if err := os.MkdirAll(gvkDir, os.ModePerm); err != nil {
				return err
			}

			if err := os.WriteFile(path.Join(gvkDir, "types_gen.cue"), []byte(cueGen), 0644); err != nil {
				return err
			}
		}
	}

	return nil
}
