// Copyright 2023 Stefan Prodan
// SPDX-License-Identifier: Apache-2.0

package v1alpha1

import (
	"encoding/base64"
)

// CertSecret is a generator for Kubernetes Secrets of type kubernetes.io/tls.
// Spec: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets.
#CertSecret: {
	// Metadata is the Kubernetes object's metadata generated by Timoni.
	meta=metadata: #Metadata

	// Cert is the TLS certificate in PEM format.
	cert!: string

	// Key is the TLS private key in PEM format.
	key!: string

	// CA is the TLS certificate authority in PEM format.
	ca?: string

	// The secret is a read-only field that contains the generated
	// Kubernetes Secret of type kubernetes.io/tls.
	secret: {
		apiVersion: "v1"
		kind:       "Secret"
		type:       "kubernetes.io/tls"
		metadata:   meta
		stringData: {
			"tls.crt": cert
			"tls.key": key
			if ca != _|_ {
				"ca.crt": ca
			}
		}
	}
}

// ImagePullSecret is a generator for Kubernetes Secrets of type kubernetes.io/dockerconfigjson.
// Spec: https://kubernetes.io/docs/concepts/configuration/secret/#docker-config-secrets.
#ImagePullSecret: {
	// Metadata is the Kubernetes object's metadata generated by Timoni.
	meta=metadata: #Metadata

	// Registry is the hostname of the container registry in the format [HOST[:PORT_NUMBER]].
	registry!: string

	// Username is the username used to authenticate to the container registry.
	username!: string

	// Password is the password used to authenticate to the container registry.
	password!: string

	let auth = base64.Encode(null, username+":"+password)

	// The secret is a read-only field that contains the generated
	// Kubernetes Secret of type kubernetes.io/dockerconfigjson.
	secret: {
		apiVersion: "v1"
		kind:       "Secret"
		type:       "kubernetes.io/dockerconfigjson"
		metadata:   meta
		stringData: {
			".dockerconfigjson": #"""
				{
					"auths": {
						"\#(registry)": {
							"username": "\#(username)",
							"password": "\#(password)",
							"auth": "\#(auth)"
						}
					}
				}
			"""#
		}
	}
}
